{"ast":null,"code":"'use strict';\n\nconst ApiConfig = require('./apiConfig');\n\nconst HttpClient = require('./httpClient');\n\nconst Transaction = require('./transaction');\n/**\n * Iris object able to do API request to Midtrans Iris API\n */\n\n\nclass Iris {\n  /**\n   * Initiate with options\n   * @param  {Object} options - should have these props:\n   * isProduction, apiKey\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      isProduction: false,\n      serverKey: ''\n    };\n    this.apiConfig = new ApiConfig(options);\n    this.httpClient = new HttpClient(this);\n    this.transaction = new Transaction(this);\n  }\n  /**\n   * Do `/ping` API request to Iris API\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  ping() {\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl() + '/ping';\n    let responsePromise = this.httpClient.request('get', this.apiConfig.get().serverKey, apiUrl);\n    return responsePromise;\n  }\n  /**\n   * Do create `/beneficiaries` API request to Iris API\n   * @param  {Object} parameter - object of Iris API JSON body as parameter, will be converted to JSON (more params detail refer to: https://iris-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  createBeneficiaries() {\n    let parameter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl() + '/beneficiaries';\n    let responsePromise = this.httpClient.request('post', this.apiConfig.get().serverKey, apiUrl, parameter);\n    return responsePromise;\n  }\n  /**\n   * Do update `/beneficiaries/<alias_name>` API request to Iris API\n   * @param  {String} parameter - alias_name of the beneficiaries that need to be updated\n   * @param  {Object} parameter - object of Iris API JSON body as parameter, will be converted to JSON (more params detail refer to: https://iris-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  updateBeneficiaries(aliasName) {\n    let parameter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl() + '/beneficiaries/' + aliasName;\n    let responsePromise = this.httpClient.request('patch', this.apiConfig.get().serverKey, apiUrl, parameter);\n    return responsePromise;\n  }\n  /**\n   * Do `/beneficiaries` API request to Iris API\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  getBeneficiaries() {\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl() + '/beneficiaries';\n    let responsePromise = this.httpClient.request('get', this.apiConfig.get().serverKey, apiUrl);\n    return responsePromise;\n  }\n  /**\n   * Do create `/payouts` API request to Iris API\n   * @param  {Object} parameter - object of Iris API JSON body as parameter, will be converted to JSON (more params detail refer to: https://iris-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  createPayouts() {\n    let parameter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl() + '/payouts';\n    let responsePromise = this.httpClient.request('post', this.apiConfig.get().serverKey, apiUrl, parameter);\n    return responsePromise;\n  }\n  /**\n   * Do approve `/payouts/approve` API request to Iris API\n   * @param  {Object} parameter - object of Iris API JSON body as parameter, will be converted to JSON (more params detail refer to: https://iris-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  approvePayouts() {\n    let parameter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl() + '/payouts/approve';\n    let responsePromise = this.httpClient.request('post', this.apiConfig.get().serverKey, apiUrl, parameter);\n    return responsePromise;\n  }\n  /**\n   * Do reject `/payouts/reject` API request to Iris API\n   * @param  {Object} parameter - object of Iris API JSON body as parameter, will be converted to JSON (more params detail refer to: https://iris-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  rejectPayouts() {\n    let parameter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl() + '/payouts/reject';\n    let responsePromise = this.httpClient.request('post', this.apiConfig.get().serverKey, apiUrl, parameter);\n    return responsePromise;\n  }\n  /**\n   * Do `/payouts/<reference_no>` API request to Iris API\n   * @param  {String} parameter - reference_no of the payout\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  getPayoutDetails(referenceNo) {\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl() + '/payouts/' + referenceNo;\n    let responsePromise = this.httpClient.request('get', this.apiConfig.get().serverKey, apiUrl);\n    return responsePromise;\n  }\n  /**\n   * Do `/statements` API request to Iris API\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  // https://iris-docs.midtrans.com/#transaction-history\n\n\n  getTransactionHistory() {\n    let parameter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl() + '/statements';\n    let isGetMethodWithJsonBodyParam = true;\n    let responsePromise = this.httpClient.request('get', this.apiConfig.get().serverKey, apiUrl, null, // it doesn't use URL query param\n    parameter); // but it use JSON param instead, non standard\n\n    return responsePromise;\n  }\n  /**\n   * Do `/channels` API request to Iris API\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  getTopupChannels() {\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl() + '/channels';\n    let responsePromise = this.httpClient.request('get', this.apiConfig.get().serverKey, apiUrl);\n    return responsePromise;\n  }\n  /**\n   * Do `/balance` API request to Iris API\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  getBalance() {\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl() + '/balance';\n    let responsePromise = this.httpClient.request('get', this.apiConfig.get().serverKey, apiUrl);\n    return responsePromise;\n  }\n  /**\n   * Do `/bank_accounts` API request to Iris API\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  getFacilitatorBankAccounts() {\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl() + '/bank_accounts';\n    let responsePromise = this.httpClient.request('get', this.apiConfig.get().serverKey, apiUrl);\n    return responsePromise;\n  }\n  /**\n   * Do `/bank_accounts/<bank_account_id>/balance` API request to Iris API\n   * @param  {String} parameter - bank_account_id of the bank account\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  getFacilitatorBalance(bankAccountId) {\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl() + '/bank_accounts/' + bankAccountId + '/balance';\n    let responsePromise = this.httpClient.request('get', this.apiConfig.get().serverKey, apiUrl);\n    return responsePromise;\n  }\n  /**\n   * Do `/beneficiary_banks` API request to Iris API\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  getBeneficiaryBanks() {\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl() + '/beneficiary_banks';\n    let responsePromise = this.httpClient.request('get', this.apiConfig.get().serverKey, apiUrl);\n    return responsePromise;\n  }\n  /**\n   * Do `/account_validation` API request to Iris API\n   * @param  {Object} parameter - object of Iris API JSON body as parameter, will be converted to GET Query param (more params detail refer to: https://iris-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  validateBankAccount() {\n    let parameter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl() + '/account_validation';\n    let responsePromise = this.httpClient.request('get', this.apiConfig.get().serverKey, apiUrl, parameter);\n    return responsePromise;\n  }\n\n}\n\nmodule.exports = Iris;","map":{"version":3,"sources":["D:/udemy/Suppee/frontend/node_modules/midtrans-client/lib/iris.js"],"names":["ApiConfig","require","HttpClient","Transaction","Iris","constructor","options","isProduction","serverKey","apiConfig","httpClient","transaction","ping","apiUrl","getIrisApiBaseUrl","responsePromise","request","get","createBeneficiaries","parameter","updateBeneficiaries","aliasName","getBeneficiaries","createPayouts","approvePayouts","rejectPayouts","getPayoutDetails","referenceNo","getTransactionHistory","isGetMethodWithJsonBodyParam","getTopupChannels","getBalance","getFacilitatorBankAccounts","getFacilitatorBalance","bankAccountId","getBeneficiaryBanks","validateBankAccount","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst ApiConfig = require('./apiConfig');\nconst HttpClient = require('./httpClient');\nconst Transaction = require('./transaction');\n/**\n * Iris object able to do API request to Midtrans Iris API\n */\nclass Iris{\n  /**\n   * Initiate with options\n   * @param  {Object} options - should have these props:\n   * isProduction, apiKey\n   */\n  constructor(options={isProduction:false,serverKey:''}){\n    this.apiConfig = new ApiConfig(options);\n    this.httpClient = new HttpClient(this);\n    this.transaction = new Transaction(this);\n  }\n  /**\n   * Do `/ping` API request to Iris API\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  ping(){\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl()+'/ping';\n    let responsePromise = this.httpClient.request(\n      'get',\n      this.apiConfig.get().serverKey,\n      apiUrl);\n    return responsePromise;\n  }\n  /**\n   * Do create `/beneficiaries` API request to Iris API\n   * @param  {Object} parameter - object of Iris API JSON body as parameter, will be converted to JSON (more params detail refer to: https://iris-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  createBeneficiaries(parameter={}){\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl()+'/beneficiaries';\n    let responsePromise = this.httpClient.request(\n      'post',\n      this.apiConfig.get().serverKey,\n      apiUrl,\n      parameter);\n    return responsePromise;\n  }\n  /**\n   * Do update `/beneficiaries/<alias_name>` API request to Iris API\n   * @param  {String} parameter - alias_name of the beneficiaries that need to be updated\n   * @param  {Object} parameter - object of Iris API JSON body as parameter, will be converted to JSON (more params detail refer to: https://iris-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  updateBeneficiaries(aliasName,parameter={}){\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl()+'/beneficiaries/'+aliasName;\n    let responsePromise = this.httpClient.request(\n      'patch',\n      this.apiConfig.get().serverKey,\n      apiUrl,\n      parameter);\n    return responsePromise;\n  }\n  /**\n   * Do `/beneficiaries` API request to Iris API\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  getBeneficiaries(){\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl()+'/beneficiaries';\n    let responsePromise = this.httpClient.request(\n      'get',\n      this.apiConfig.get().serverKey,\n      apiUrl);\n    return responsePromise;\n  }\n  /**\n   * Do create `/payouts` API request to Iris API\n   * @param  {Object} parameter - object of Iris API JSON body as parameter, will be converted to JSON (more params detail refer to: https://iris-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  createPayouts(parameter={}){\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl()+'/payouts';\n    let responsePromise = this.httpClient.request(\n      'post',\n      this.apiConfig.get().serverKey,\n      apiUrl,\n      parameter);\n    return responsePromise;\n  }\n  /**\n   * Do approve `/payouts/approve` API request to Iris API\n   * @param  {Object} parameter - object of Iris API JSON body as parameter, will be converted to JSON (more params detail refer to: https://iris-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  approvePayouts(parameter={}){\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl()+'/payouts/approve';\n    let responsePromise = this.httpClient.request(\n      'post',\n      this.apiConfig.get().serverKey,\n      apiUrl,\n      parameter);\n    return responsePromise;\n  }\n  /**\n   * Do reject `/payouts/reject` API request to Iris API\n   * @param  {Object} parameter - object of Iris API JSON body as parameter, will be converted to JSON (more params detail refer to: https://iris-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  rejectPayouts(parameter={}){\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl()+'/payouts/reject';\n    let responsePromise = this.httpClient.request(\n      'post',\n      this.apiConfig.get().serverKey,\n      apiUrl,\n      parameter);\n    return responsePromise;\n  }\n  /**\n   * Do `/payouts/<reference_no>` API request to Iris API\n   * @param  {String} parameter - reference_no of the payout\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  getPayoutDetails(referenceNo){\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl()+'/payouts/'+referenceNo;\n    let responsePromise = this.httpClient.request(\n      'get',\n      this.apiConfig.get().serverKey,\n      apiUrl);\n    return responsePromise;\n  }\n  /**\n   * Do `/statements` API request to Iris API\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n   // https://iris-docs.midtrans.com/#transaction-history\n  getTransactionHistory(parameter={}){\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl()+'/statements';\n    let isGetMethodWithJsonBodyParam = true;\n    let responsePromise = this.httpClient.request(\n      'get',\n      this.apiConfig.get().serverKey,\n      apiUrl,\n      null, // it doesn't use URL query param\n      parameter); // but it use JSON param instead, non standard\n    return responsePromise;\n  }\n  /**\n   * Do `/channels` API request to Iris API\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  getTopupChannels(){\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl()+'/channels';\n    let responsePromise = this.httpClient.request(\n      'get',\n      this.apiConfig.get().serverKey,\n      apiUrl);\n    return responsePromise;\n  }\n  /**\n   * Do `/balance` API request to Iris API\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  getBalance(){\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl()+'/balance';\n    let responsePromise = this.httpClient.request(\n      'get',\n      this.apiConfig.get().serverKey,\n      apiUrl);\n    return responsePromise;\n  }\n  /**\n   * Do `/bank_accounts` API request to Iris API\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  getFacilitatorBankAccounts(){\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl()+'/bank_accounts';\n    let responsePromise = this.httpClient.request(\n      'get',\n      this.apiConfig.get().serverKey,\n      apiUrl);\n    return responsePromise;\n  }\n  /**\n   * Do `/bank_accounts/<bank_account_id>/balance` API request to Iris API\n   * @param  {String} parameter - bank_account_id of the bank account\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  getFacilitatorBalance(bankAccountId){\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl()+'/bank_accounts/'+bankAccountId+'/balance';\n    let responsePromise = this.httpClient.request(\n      'get',\n      this.apiConfig.get().serverKey,\n      apiUrl);\n    return responsePromise;\n  }\n  /**\n   * Do `/beneficiary_banks` API request to Iris API\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  getBeneficiaryBanks(){\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl()+'/beneficiary_banks';\n    let responsePromise = this.httpClient.request(\n      'get',\n      this.apiConfig.get().serverKey,\n      apiUrl);\n    return responsePromise;\n  }\n  /**\n   * Do `/account_validation` API request to Iris API\n   * @param  {Object} parameter - object of Iris API JSON body as parameter, will be converted to GET Query param (more params detail refer to: https://iris-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  validateBankAccount(parameter={}){\n    let apiUrl = this.apiConfig.getIrisApiBaseUrl()+'/account_validation';\n    let responsePromise = this.httpClient.request(\n      'get',\n      this.apiConfig.get().serverKey,\n      apiUrl,\n      parameter);\n    return responsePromise;\n  }\n}\nmodule.exports = Iris;"]},"metadata":{},"sourceType":"script"}