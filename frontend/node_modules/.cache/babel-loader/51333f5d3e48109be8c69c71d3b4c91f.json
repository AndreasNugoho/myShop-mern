{"ast":null,"code":"'use strict';\n\nconst ApiConfig = require('./apiConfig');\n\nconst HttpClient = require('./httpClient');\n\nconst Transaction = require('./transaction');\n/**\n * CoreApi object able to do API request to Midtrans Core API\n */\n\n\nclass CoreApi {\n  /**\n   * Initiate with options\n   * @param  {Object} options - should have these props:\n   * isProduction, serverKey, clientKey\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      isProduction: false,\n      serverKey: '',\n      clientKey: ''\n    };\n    this.apiConfig = new ApiConfig(options);\n    this.httpClient = new HttpClient(this);\n    this.transaction = new Transaction(this);\n  }\n  /**\n   * Do `/v2/charge` API request to Core API\n   * @param  {Object} parameter - object of Core API JSON body as parameter, will be converted to JSON (more params detail refer to: https://api-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  charge() {\n    let parameter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v2/charge';\n    let responsePromise = this.httpClient.request('post', this.apiConfig.get().serverKey, apiUrl, parameter);\n    return responsePromise;\n  }\n  /**\n   * Do `/v2/capture` API request to Core API\n   * @param  {Object} parameter - object of Core API JSON body as parameter, will be converted to JSON (more params detail refer to: https://api-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  capture() {\n    let parameter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v2/capture';\n    let responsePromise = this.httpClient.request('post', this.apiConfig.get().serverKey, apiUrl, parameter);\n    return responsePromise;\n  }\n  /**\n   * Do `/v2/card/register` API request to Core API\n   * @param  {Object} parameter - object of Core API JSON body as parameter, will be converted to JSON (more params detail refer to: https://api-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  cardRegister() {\n    let parameter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v2/card/register';\n    let responsePromise = this.httpClient.request('get', this.apiConfig.get().serverKey, apiUrl, parameter);\n    return responsePromise;\n  }\n  /**\n   * Do `/v2/token` API request to Core API\n   * @param  {Object} parameter - object of Core API JSON body as parameter, will be converted to JSON (more params detail refer to: https://api-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  cardToken() {\n    let parameter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v2/token';\n    let responsePromise = this.httpClient.request('get', this.apiConfig.get().serverKey, apiUrl, parameter);\n    return responsePromise;\n  }\n  /**\n   * Do `/v2/point_inquiry/<tokenId>` API request to Core API\n   * @param  {String} tokenId - tokenId of credit card (more params detail refer to: https://api-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  cardPointInquiry(tokenId) {\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v2/point_inquiry/' + tokenId;\n    let responsePromise = this.httpClient.request('get', this.apiConfig.get().serverKey, apiUrl, null);\n    return responsePromise;\n  }\n  /**\n   * Create `/v2/pay/account` API request to Core API\n   * @param  {Object} parameter - object of Core API JSON body as parameter, will be converted to JSON (more params detail refer to: https://api-docs.midtrans.com/#create-pay-account)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  linkPaymentAccount() {\n    let parameter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v2/pay/account';\n    let responsePromise = this.httpClient.request('post', this.apiConfig.get().serverKey, apiUrl, parameter);\n    return responsePromise;\n  }\n  /**\n   * Do `/v2/pay/account/<accountId>` API request to Core API\n   * @param  {String} accountId - accountId for specific payment channel (more params detail refer to: https://api-docs.midtrans.com/#get-pay-account)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  getPaymentAccount(accountId) {\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v2/pay/account/' + accountId;\n    let responsePromise = this.httpClient.request('get', this.apiConfig.get().serverKey, apiUrl, null);\n    return responsePromise;\n  }\n  /**\n   * Unbind `/v2/pay/account/<accountId>/unbind` API request to Core API\n   * @param  {String} accountId - accountId for specific payment channel (more params detail refer to: https://api-docs.midtrans.com/#unbind-pay-account)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  unlinkPaymentAccount(accountId) {\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v2/pay/account/' + accountId + '/unbind';\n    let responsePromise = this.httpClient.request('post', this.apiConfig.get().serverKey, apiUrl, null);\n    return responsePromise;\n  }\n  /**\n   * Create `/v1/subscription` API request to Core API\n   * @param  {Object} parameter - object of Core API JSON body as parameter, will be converted to JSON (more params detail refer to: https://api-docs.midtrans.com/#create-subscription)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  createSubscription() {\n    let parameter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v1/subscriptions';\n    let responsePromise = this.httpClient.request('post', this.apiConfig.get().serverKey, apiUrl, parameter);\n    return responsePromise;\n  }\n  /**\n   * Do `/v1/subscription/<subscriptionId>` API request to Core API\n   * @param  {String} subscriptionId - subscriptionId given by Midtrans (more params detail refer to: https://api-docs.midtrans.com/#get-subscription)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  getSubscription(subscriptionId) {\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v1/subscriptions/' + subscriptionId;\n    let responsePromise = this.httpClient.request('get', this.apiConfig.get().serverKey, apiUrl, null);\n    return responsePromise;\n  }\n  /**\n   * Do `/v1/subscription/<subscriptionId>/disable` API request to Core API\n   * @param  {String} subscriptionId - subscriptionId given by Midtrans (more params detail refer to: https://api-docs.midtrans.com/#disable-subscription)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  disableSubscription(subscriptionId) {\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v1/subscriptions/' + subscriptionId + '/disable';\n    let responsePromise = this.httpClient.request('post', this.apiConfig.get().serverKey, apiUrl, null);\n    return responsePromise;\n  }\n  /**\n   * Do `/v1/subscription/<subscriptionId>/enable` API request to Core API\n   * @param  {String} subscriptionId - subscriptionId given by Midtrans (more params detail refer to: https://api-docs.midtrans.com/#enable-subscription)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  enableSubscription(subscriptionId) {\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v1/subscriptions/' + subscriptionId + '/enable';\n    let responsePromise = this.httpClient.request('post', this.apiConfig.get().serverKey, apiUrl, null);\n    return responsePromise;\n  }\n  /**\n   * Do update subscription `/v1/subscription/<subscriptionId>` API request to Core API\n   * @param  {String} subscriptionId - subscriptionId given by Midtrans (more params detail refer to: https://api-docs.midtrans.com/#update-subscription)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  updateSubscription(subscriptionId) {\n    let parameter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v1/subscriptions/' + subscriptionId;\n    let responsePromise = this.httpClient.request('patch', this.apiConfig.get().serverKey, apiUrl, parameter);\n    return responsePromise;\n  }\n\n}\n\nmodule.exports = CoreApi;","map":{"version":3,"sources":["D:/udemy/Suppee/frontend/node_modules/midtrans-client/lib/coreApi.js"],"names":["ApiConfig","require","HttpClient","Transaction","CoreApi","constructor","options","isProduction","serverKey","clientKey","apiConfig","httpClient","transaction","charge","parameter","apiUrl","getCoreApiBaseUrl","responsePromise","request","get","capture","cardRegister","cardToken","cardPointInquiry","tokenId","linkPaymentAccount","getPaymentAccount","accountId","unlinkPaymentAccount","createSubscription","getSubscription","subscriptionId","disableSubscription","enableSubscription","updateSubscription","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst ApiConfig = require('./apiConfig');\nconst HttpClient = require('./httpClient');\nconst Transaction = require('./transaction');\n/**\n * CoreApi object able to do API request to Midtrans Core API\n */\nclass CoreApi {\n  /**\n   * Initiate with options\n   * @param  {Object} options - should have these props:\n   * isProduction, serverKey, clientKey\n   */\n  constructor(options = {isProduction: false, serverKey: '', clientKey: ''}) {\n    this.apiConfig = new ApiConfig(options);\n    this.httpClient = new HttpClient(this);\n    this.transaction = new Transaction(this);\n  }\n\n  /**\n   * Do `/v2/charge` API request to Core API\n   * @param  {Object} parameter - object of Core API JSON body as parameter, will be converted to JSON (more params detail refer to: https://api-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  charge(parameter = {}) {\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v2/charge';\n    let responsePromise = this.httpClient.request(\n        'post',\n        this.apiConfig.get().serverKey,\n        apiUrl,\n        parameter);\n    return responsePromise;\n  }\n\n  /**\n   * Do `/v2/capture` API request to Core API\n   * @param  {Object} parameter - object of Core API JSON body as parameter, will be converted to JSON (more params detail refer to: https://api-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  capture(parameter = {}) {\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v2/capture';\n    let responsePromise = this.httpClient.request(\n        'post',\n        this.apiConfig.get().serverKey,\n        apiUrl,\n        parameter);\n    return responsePromise;\n  }\n\n  /**\n   * Do `/v2/card/register` API request to Core API\n   * @param  {Object} parameter - object of Core API JSON body as parameter, will be converted to JSON (more params detail refer to: https://api-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  cardRegister(parameter = {}) {\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v2/card/register';\n    let responsePromise = this.httpClient.request(\n        'get',\n        this.apiConfig.get().serverKey,\n        apiUrl,\n        parameter);\n    return responsePromise;\n  }\n\n  /**\n   * Do `/v2/token` API request to Core API\n   * @param  {Object} parameter - object of Core API JSON body as parameter, will be converted to JSON (more params detail refer to: https://api-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  cardToken(parameter = {}) {\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v2/token';\n    let responsePromise = this.httpClient.request(\n        'get',\n        this.apiConfig.get().serverKey,\n        apiUrl,\n        parameter);\n    return responsePromise;\n  }\n\n  /**\n   * Do `/v2/point_inquiry/<tokenId>` API request to Core API\n   * @param  {String} tokenId - tokenId of credit card (more params detail refer to: https://api-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  cardPointInquiry(tokenId) {\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v2/point_inquiry/' + tokenId;\n    let responsePromise = this.httpClient.request(\n        'get',\n        this.apiConfig.get().serverKey,\n        apiUrl,\n        null);\n    return responsePromise;\n  }\n\n  /**\n   * Create `/v2/pay/account` API request to Core API\n   * @param  {Object} parameter - object of Core API JSON body as parameter, will be converted to JSON (more params detail refer to: https://api-docs.midtrans.com/#create-pay-account)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  linkPaymentAccount(parameter = {}) {\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v2/pay/account';\n    let responsePromise = this.httpClient.request(\n        'post',\n        this.apiConfig.get().serverKey,\n        apiUrl,\n        parameter);\n    return responsePromise;\n  }\n\n  /**\n   * Do `/v2/pay/account/<accountId>` API request to Core API\n   * @param  {String} accountId - accountId for specific payment channel (more params detail refer to: https://api-docs.midtrans.com/#get-pay-account)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  getPaymentAccount(accountId) {\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v2/pay/account/' + accountId;\n    let responsePromise = this.httpClient.request(\n        'get',\n        this.apiConfig.get().serverKey,\n        apiUrl,\n        null);\n    return responsePromise;\n  }\n\n  /**\n   * Unbind `/v2/pay/account/<accountId>/unbind` API request to Core API\n   * @param  {String} accountId - accountId for specific payment channel (more params detail refer to: https://api-docs.midtrans.com/#unbind-pay-account)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  unlinkPaymentAccount(accountId) {\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v2/pay/account/' + accountId + '/unbind';\n    let responsePromise = this.httpClient.request(\n        'post',\n        this.apiConfig.get().serverKey,\n        apiUrl,\n        null);\n    return responsePromise;\n  }\n\n  /**\n   * Create `/v1/subscription` API request to Core API\n   * @param  {Object} parameter - object of Core API JSON body as parameter, will be converted to JSON (more params detail refer to: https://api-docs.midtrans.com/#create-subscription)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  createSubscription(parameter = {}) {\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v1/subscriptions';\n    let responsePromise = this.httpClient.request(\n        'post',\n        this.apiConfig.get().serverKey,\n        apiUrl,\n        parameter);\n    return responsePromise;\n  }\n\n  /**\n   * Do `/v1/subscription/<subscriptionId>` API request to Core API\n   * @param  {String} subscriptionId - subscriptionId given by Midtrans (more params detail refer to: https://api-docs.midtrans.com/#get-subscription)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  getSubscription(subscriptionId) {\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v1/subscriptions/' + subscriptionId;\n    let responsePromise = this.httpClient.request(\n        'get',\n        this.apiConfig.get().serverKey,\n        apiUrl,\n        null);\n    return responsePromise;\n  }\n\n  /**\n   * Do `/v1/subscription/<subscriptionId>/disable` API request to Core API\n   * @param  {String} subscriptionId - subscriptionId given by Midtrans (more params detail refer to: https://api-docs.midtrans.com/#disable-subscription)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  disableSubscription(subscriptionId) {\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v1/subscriptions/' + subscriptionId + '/disable';\n    let responsePromise = this.httpClient.request(\n        'post',\n        this.apiConfig.get().serverKey,\n        apiUrl,\n        null);\n    return responsePromise;\n  }\n\n  /**\n   * Do `/v1/subscription/<subscriptionId>/enable` API request to Core API\n   * @param  {String} subscriptionId - subscriptionId given by Midtrans (more params detail refer to: https://api-docs.midtrans.com/#enable-subscription)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  enableSubscription(subscriptionId) {\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v1/subscriptions/' + subscriptionId + '/enable';\n    let responsePromise = this.httpClient.request(\n        'post',\n        this.apiConfig.get().serverKey,\n        apiUrl,\n        null);\n    return responsePromise;\n  }\n\n  /**\n   * Do update subscription `/v1/subscription/<subscriptionId>` API request to Core API\n   * @param  {String} subscriptionId - subscriptionId given by Midtrans (more params detail refer to: https://api-docs.midtrans.com/#update-subscription)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  updateSubscription(subscriptionId, parameter = {} ) {\n    let apiUrl = this.apiConfig.getCoreApiBaseUrl() + '/v1/subscriptions/' + subscriptionId;\n    let responsePromise = this.httpClient.request(\n        'patch',\n        this.apiConfig.get().serverKey,\n        apiUrl,\n        parameter);\n    return responsePromise;\n  }\n\n}\nmodule.exports = CoreApi;"]},"metadata":{},"sourceType":"script"}