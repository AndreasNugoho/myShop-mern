{"ast":null,"code":"'use strict';\n\nconst ApiConfig = require('./apiConfig');\n\nconst HttpClient = require('./httpClient');\n\nconst Transaction = require('./transaction');\n/**\n * Snap object used to do request to Midtrans Snap API\n */\n\n\nclass Snap {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      isProduction: false,\n      serverKey: '',\n      clientKey: ''\n    };\n    this.apiConfig = new ApiConfig(options);\n    this.httpClient = new HttpClient(this);\n    this.transaction = new Transaction(this);\n  }\n  /**\n   * Do `/transactions` API request to Snap API\n   * @param  {Object} parameter - object of Core API JSON body as parameter, will be converted to JSON (more params detail refer to: https://snap-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n\n\n  createTransaction() {\n    let parameter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let apiUrl = this.apiConfig.getSnapApiBaseUrl() + '/transactions';\n    let responsePromise = this.httpClient.request('post', this.apiConfig.get().serverKey, apiUrl, parameter);\n    return responsePromise;\n  }\n  /**\n   * Wrapper function that call `createTransaction` then:\n   * @return {Promise} - Promise of String token\n   */\n\n\n  createTransactionToken() {\n    let parameter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.createTransaction(parameter).then(function (res) {\n      return res.token;\n    });\n  }\n  /**\n   * Wrapper function that call `createTransaction` then:\n   * @return {Promise} - Promise of String redirect_url\n   */\n\n\n  createTransactionRedirectUrl() {\n    let parameter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.createTransaction(parameter).then(function (res) {\n      return res.redirect_url;\n    });\n  }\n\n}\n\nmodule.exports = Snap;","map":{"version":3,"sources":["D:/udemy/Suppee/frontend/node_modules/midtrans-client/lib/snap.js"],"names":["ApiConfig","require","HttpClient","Transaction","Snap","constructor","options","isProduction","serverKey","clientKey","apiConfig","httpClient","transaction","createTransaction","parameter","apiUrl","getSnapApiBaseUrl","responsePromise","request","get","createTransactionToken","then","res","token","createTransactionRedirectUrl","redirect_url","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,eAAD,CAA3B;AACA;AACA;AACA;;;AACA,MAAMG,IAAN,CAAU;AACRC,EAAAA,WAAW,GAAwD;AAAA,QAAvDC,OAAuD,uEAA/C;AAACC,MAAAA,YAAY,EAAC,KAAd;AAAoBC,MAAAA,SAAS,EAAC,EAA9B;AAAiCC,MAAAA,SAAS,EAAC;AAA3C,KAA+C;AACjE,SAAKC,SAAL,GAAiB,IAAIV,SAAJ,CAAcM,OAAd,CAAjB;AACA,SAAKK,UAAL,GAAkB,IAAIT,UAAJ,CAAe,IAAf,CAAlB;AACA,SAAKU,WAAL,GAAmB,IAAIT,WAAJ,CAAgB,IAAhB,CAAnB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEU,EAAAA,iBAAiB,GAAc;AAAA,QAAbC,SAAa,uEAAH,EAAG;AAC7B,QAAIC,MAAM,GAAG,KAAKL,SAAL,CAAeM,iBAAf,KAAmC,eAAhD;AACA,QAAIC,eAAe,GAAG,KAAKN,UAAL,CAAgBO,OAAhB,CACpB,MADoB,EAEpB,KAAKR,SAAL,CAAeS,GAAf,GAAqBX,SAFD,EAGpBO,MAHoB,EAIpBD,SAJoB,CAAtB;AAKA,WAAOG,eAAP;AACD;AACD;AACF;AACA;AACA;;;AACEG,EAAAA,sBAAsB,GAAc;AAAA,QAAbN,SAAa,uEAAH,EAAG;AAClC,WAAO,KAAKD,iBAAL,CAAuBC,SAAvB,EACJO,IADI,CACC,UAASC,GAAT,EAAa;AACjB,aAAOA,GAAG,CAACC,KAAX;AACD,KAHI,CAAP;AAID;AACD;AACF;AACA;AACA;;;AACEC,EAAAA,4BAA4B,GAAc;AAAA,QAAbV,SAAa,uEAAH,EAAG;AACxC,WAAO,KAAKD,iBAAL,CAAuBC,SAAvB,EACJO,IADI,CACC,UAASC,GAAT,EAAa;AACjB,aAAOA,GAAG,CAACG,YAAX;AACD,KAHI,CAAP;AAID;;AAxCO;;AA0CVC,MAAM,CAACC,OAAP,GAAiBvB,IAAjB","sourcesContent":["'use strict'\n\nconst ApiConfig = require('./apiConfig');\nconst HttpClient = require('./httpClient');\nconst Transaction = require('./transaction');\n/**\n * Snap object used to do request to Midtrans Snap API\n */\nclass Snap{\n  constructor(options={isProduction:false,serverKey:'',clientKey:''}){\n    this.apiConfig = new ApiConfig(options);\n    this.httpClient = new HttpClient(this);\n    this.transaction = new Transaction(this);\n  }\n\n  /**\n   * Do `/transactions` API request to Snap API\n   * @param  {Object} parameter - object of Core API JSON body as parameter, will be converted to JSON (more params detail refer to: https://snap-docs.midtrans.com)\n   * @return {Promise} - Promise contains Object from JSON decoded response\n   */\n  createTransaction(parameter={}){\n    let apiUrl = this.apiConfig.getSnapApiBaseUrl()+'/transactions';\n    let responsePromise = this.httpClient.request(\n      'post',\n      this.apiConfig.get().serverKey,\n      apiUrl,\n      parameter);\n    return responsePromise;\n  }\n  /**\n   * Wrapper function that call `createTransaction` then:\n   * @return {Promise} - Promise of String token\n   */\n  createTransactionToken(parameter={}){\n    return this.createTransaction(parameter)\n      .then(function(res){\n        return res.token;\n      })\n  }\n  /**\n   * Wrapper function that call `createTransaction` then:\n   * @return {Promise} - Promise of String redirect_url\n   */\n  createTransactionRedirectUrl(parameter={}){\n    return this.createTransaction(parameter)\n      .then(function(res){\n        return res.redirect_url;\n      })\n  }\n}\nmodule.exports = Snap;"]},"metadata":{},"sourceType":"script"}