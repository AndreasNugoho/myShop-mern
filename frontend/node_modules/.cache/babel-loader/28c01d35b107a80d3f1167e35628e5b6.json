{"ast":null,"code":"'use strict';\n\nconst _ = require('lodash');\n/**\n *  Config Object that used to store isProduction, serverKey, clientKey.\n *  And also API base urls.\n */\n\n\nclass ApiConfig {\n  /**\n   * Initiate with options\n   * @param  {Object} options - should have these props:\n   * isProduction, serverKey, clientKey\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      isProduction: false,\n      serverKey: '',\n      clientKey: ''\n    };\n    this.isProduction = false;\n    this.serverKey = '';\n    this.clientKey = '';\n    this.set(options);\n  }\n  /**\n   * Return config stored\n   * @return {Object} object contains isProduction, serverKey, clientKey\n   */\n\n\n  get() {\n    let currentConfig = {\n      isProduction: this.isProduction,\n      serverKey: this.serverKey,\n      clientKey: this.clientKey\n    };\n    return currentConfig;\n  }\n  /**\n   * Set config stored\n   * @param {Object} options - object contains isProduction, serverKey, clientKey]\n   */\n\n\n  set(options) {\n    let currentConfig = {\n      isProduction: this.isProduction,\n      serverKey: this.serverKey,\n      clientKey: this.clientKey\n    };\n\n    const parsedOptions = _.pick(options, ['isProduction', 'serverKey', 'clientKey']);\n\n    let mergedConfig = _.merge({}, currentConfig, parsedOptions);\n\n    this.isProduction = mergedConfig.isProduction;\n    this.serverKey = mergedConfig.serverKey;\n    this.clientKey = mergedConfig.clientKey;\n  }\n  /**\n   * @return {String} core api base url\n   */\n\n\n  getCoreApiBaseUrl() {\n    return this.isProduction ? ApiConfig.CORE_PRODUCTION_BASE_URL : ApiConfig.CORE_SANDBOX_BASE_URL;\n  }\n\n  /**\n   * @return {String} snap api base url\n   */\n  getSnapApiBaseUrl() {\n    return this.isProduction ? ApiConfig.SNAP_PRODUCTION_BASE_URL : ApiConfig.SNAP_SANDBOX_BASE_URL;\n  }\n\n  /**\n   * @return {String} Iris api base url\n   */\n  getIrisApiBaseUrl() {\n    return this.isProduction ? ApiConfig.IRIS_PRODUCTION_BASE_URL : ApiConfig.IRIS_SANDBOX_BASE_URL;\n  }\n\n} // Static vars\n\n\nApiConfig.CORE_SANDBOX_BASE_URL = 'https://api.sandbox.midtrans.com';\nApiConfig.CORE_PRODUCTION_BASE_URL = 'https://api.midtrans.com';\nApiConfig.SNAP_SANDBOX_BASE_URL = 'https://app.sandbox.midtrans.com/snap/v1';\nApiConfig.SNAP_PRODUCTION_BASE_URL = 'https://app.midtrans.com/snap/v1'; // Iris API url\n\nApiConfig.IRIS_SANDBOX_BASE_URL = 'https://app.sandbox.midtrans.com/iris/api/v1';\nApiConfig.IRIS_PRODUCTION_BASE_URL = 'https://app.midtrans.com/iris/api/v1';\nmodule.exports = ApiConfig;","map":{"version":3,"sources":["D:/udemy/Suppee/frontend/node_modules/midtrans-client/lib/apiConfig.js"],"names":["_","require","ApiConfig","constructor","options","isProduction","serverKey","clientKey","set","get","currentConfig","parsedOptions","pick","mergedConfig","merge","getCoreApiBaseUrl","CORE_PRODUCTION_BASE_URL","CORE_SANDBOX_BASE_URL","getSnapApiBaseUrl","SNAP_PRODUCTION_BASE_URL","SNAP_SANDBOX_BASE_URL","getIrisApiBaseUrl","IRIS_PRODUCTION_BASE_URL","IRIS_SANDBOX_BASE_URL","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;AACA;AACA;AACA;AACA;;;AACA,MAAMC,SAAN,CAAe;AACb;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,GAAwD;AAAA,QAAvDC,OAAuD,uEAA/C;AAACC,MAAAA,YAAY,EAAC,KAAd;AAAoBC,MAAAA,SAAS,EAAC,EAA9B;AAAiCC,MAAAA,SAAS,EAAC;AAA3C,KAA+C;AACjE,SAAKF,YAAL,GAAoB,KAApB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AAEA,SAAKC,GAAL,CAASJ,OAAT;AACD;AACD;AACF;AACA;AACA;;;AACEK,EAAAA,GAAG,GAAE;AACH,QAAIC,aAAa,GAAG;AAClBL,MAAAA,YAAY,EAAG,KAAKA,YADF;AAElBC,MAAAA,SAAS,EAAG,KAAKA,SAFC;AAGlBC,MAAAA,SAAS,EAAG,KAAKA;AAHC,KAApB;AAKA,WAAOG,aAAP;AACD;AACD;AACF;AACA;AACA;;;AACEF,EAAAA,GAAG,CAACJ,OAAD,EAAS;AACV,QAAIM,aAAa,GAAG;AAClBL,MAAAA,YAAY,EAAG,KAAKA,YADF;AAElBC,MAAAA,SAAS,EAAG,KAAKA,SAFC;AAGlBC,MAAAA,SAAS,EAAG,KAAKA;AAHC,KAApB;;AAKA,UAAMI,aAAa,GAAGX,CAAC,CAACY,IAAF,CAAOR,OAAP,EAAe,CAAC,cAAD,EAAgB,WAAhB,EAA4B,WAA5B,CAAf,CAAtB;;AACA,QAAIS,YAAY,GAAGb,CAAC,CAACc,KAAF,CAAQ,EAAR,EAAWJ,aAAX,EAAyBC,aAAzB,CAAnB;;AAEA,SAAKN,YAAL,GAAoBQ,YAAY,CAACR,YAAjC;AACA,SAAKC,SAAL,GAAiBO,YAAY,CAACP,SAA9B;AACA,SAAKC,SAAL,GAAiBM,YAAY,CAACN,SAA9B;AACD;AACD;AACF;AACA;;;AACEQ,EAAAA,iBAAiB,GAAE;AACjB,WAAO,KAAKV,YAAL,GACLH,SAAS,CAACc,wBADL,GAELd,SAAS,CAACe,qBAFZ;AAGD;;AAED;AACF;AACA;AACEC,EAAAA,iBAAiB,GAAE;AACjB,WAAO,KAAKb,YAAL,GACLH,SAAS,CAACiB,wBADL,GAELjB,SAAS,CAACkB,qBAFZ;AAGD;;AAED;AACF;AACA;AACEC,EAAAA,iBAAiB,GAAE;AACjB,WAAO,KAAKhB,YAAL,GACLH,SAAS,CAACoB,wBADL,GAELpB,SAAS,CAACqB,qBAFZ;AAGD;;AAnEY,C,CAsEf;;;AACArB,SAAS,CAACe,qBAAV,GAAkC,kCAAlC;AACAf,SAAS,CAACc,wBAAV,GAAqC,0BAArC;AACAd,SAAS,CAACkB,qBAAV,GAAkC,0CAAlC;AACAlB,SAAS,CAACiB,wBAAV,GAAqC,kCAArC,C,CACA;;AACAjB,SAAS,CAACqB,qBAAV,GAAkC,8CAAlC;AACArB,SAAS,CAACoB,wBAAV,GAAqC,sCAArC;AAEAE,MAAM,CAACC,OAAP,GAAiBvB,SAAjB","sourcesContent":["'use strict'\n\nconst _ = require('lodash');\n/**\n *  Config Object that used to store isProduction, serverKey, clientKey.\n *  And also API base urls.\n */\nclass ApiConfig{\n  /**\n   * Initiate with options\n   * @param  {Object} options - should have these props:\n   * isProduction, serverKey, clientKey\n   */\n  constructor(options={isProduction:false,serverKey:'',clientKey:''}){\n    this.isProduction = false;\n    this.serverKey = '';\n    this.clientKey = '';\n\n    this.set(options);\n  }\n  /**\n   * Return config stored\n   * @return {Object} object contains isProduction, serverKey, clientKey\n   */\n  get(){\n    let currentConfig = {\n      isProduction : this.isProduction,\n      serverKey : this.serverKey,\n      clientKey : this.clientKey\n    };\n    return currentConfig;\n  }\n  /**\n   * Set config stored\n   * @param {Object} options - object contains isProduction, serverKey, clientKey]\n   */\n  set(options){\n    let currentConfig = {\n      isProduction : this.isProduction,\n      serverKey : this.serverKey,\n      clientKey : this.clientKey\n    };\n    const parsedOptions = _.pick(options,['isProduction','serverKey','clientKey']);\n    let mergedConfig = _.merge({},currentConfig,parsedOptions);\n\n    this.isProduction = mergedConfig.isProduction;\n    this.serverKey = mergedConfig.serverKey;\n    this.clientKey = mergedConfig.clientKey;\n  }\n  /**\n   * @return {String} core api base url\n   */\n  getCoreApiBaseUrl(){\n    return this.isProduction ?\n      ApiConfig.CORE_PRODUCTION_BASE_URL : \n      ApiConfig.CORE_SANDBOX_BASE_URL;\n  };\n\n  /**\n   * @return {String} snap api base url\n   */\n  getSnapApiBaseUrl(){\n    return this.isProduction ?\n      ApiConfig.SNAP_PRODUCTION_BASE_URL :\n      ApiConfig.SNAP_SANDBOX_BASE_URL;\n  };\n\n  /**\n   * @return {String} Iris api base url\n   */\n  getIrisApiBaseUrl(){\n    return this.isProduction ?\n      ApiConfig.IRIS_PRODUCTION_BASE_URL :\n      ApiConfig.IRIS_SANDBOX_BASE_URL;\n  };\n}\n\n// Static vars\nApiConfig.CORE_SANDBOX_BASE_URL = 'https://api.sandbox.midtrans.com';\nApiConfig.CORE_PRODUCTION_BASE_URL = 'https://api.midtrans.com';\nApiConfig.SNAP_SANDBOX_BASE_URL = 'https://app.sandbox.midtrans.com/snap/v1';\nApiConfig.SNAP_PRODUCTION_BASE_URL = 'https://app.midtrans.com/snap/v1';\n// Iris API url\nApiConfig.IRIS_SANDBOX_BASE_URL = 'https://app.sandbox.midtrans.com/iris/api/v1';\nApiConfig.IRIS_PRODUCTION_BASE_URL = 'https://app.midtrans.com/iris/api/v1';\n\nmodule.exports = ApiConfig;"]},"metadata":{},"sourceType":"script"}