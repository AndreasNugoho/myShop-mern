{"ast":null,"code":"import { CART_ADD_ITEM, CART_REMOVE_ITEM, CART_RESET_ITEM, CART_SAVE_PAYMENT_METHOD, CART_SAVE_SHIPPING_ADDRESS } from \"../constants/cartConstants\"; // search in the state.cartItems array\n// for the existence of the specific product\n\nexport const cartReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    cartItems: [],\n    shippingAddress: {}\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CART_ADD_ITEM:\n      // that is defined by item (by the action.payload)\n      const item = action.payload; // if we find a match assign the result to the existItem variable\n\n      const existItem = state.cartItems.find(x => x.product === item.product); // if there is already a product matching the item in the state.cartItems array\n\n      if (existItem) {\n        // return the existing state with adjusted cartItems\n        return { ...state,\n          // map through the cardItems array and replace the matching product with the new item\n          // leave the rest products as they were\n          cartItems: state.cartItems.map(x => x.product === existItem.product ? item : x)\n        }; // otherwise if the item is NOT already a product matching the item in the state.cartItems array\n      } else {\n        // return the existing state with adjusted cardItems\n        return { ...state,\n          // return a new cardItems array with the previous products spread and add the new item\n          cartItems: [...state.cartItems, item]\n        };\n      }\n\n    case CART_REMOVE_ITEM:\n      return { ...state,\n        cartItems: state.cartItems.filter(x => x.product !== action.payload)\n      };\n\n    case CART_RESET_ITEM:\n      return { ...state,\n        cartItems: []\n      };\n\n    case CART_SAVE_SHIPPING_ADDRESS:\n      return { ...state,\n        shippingAddress: action.payload\n      };\n\n    case CART_SAVE_PAYMENT_METHOD:\n      return { ...state,\n        paymentMethod: action.payload\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["D:/udemy/myShop-mern/frontend/src/reducers/cartReducers.js"],"names":["CART_ADD_ITEM","CART_REMOVE_ITEM","CART_RESET_ITEM","CART_SAVE_PAYMENT_METHOD","CART_SAVE_SHIPPING_ADDRESS","cartReducer","state","cartItems","shippingAddress","action","type","item","payload","existItem","find","x","product","map","filter","paymentMethod"],"mappings":"AAAA,SACIA,aADJ,EAEIC,gBAFJ,EAGIC,eAHJ,EAIIC,wBAJJ,EAKIC,0BALJ,QAMO,4BANP,C,CAQA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAG,YAGtB;AAAA,MAFDC,KAEC,uEAFO;AAAEC,IAAAA,SAAS,EAAE,EAAb;AAAiBC,IAAAA,eAAe,EAAE;AAAlC,GAEP;AAAA,MADDC,MACC;;AACD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,aAAL;AACI;AACA,YAAMW,IAAI,GAAGF,MAAM,CAACG,OAApB,CAFJ,CAII;;AACA,YAAMC,SAAS,GAAGP,KAAK,CAACC,SAAN,CAAgBO,IAAhB,CACbC,CAAD,IAAOA,CAAC,CAACC,OAAF,KAAcL,IAAI,CAACK,OADZ,CAAlB,CALJ,CASI;;AACA,UAAIH,SAAJ,EAAe;AACX;AACA,eAAO,EACH,GAAGP,KADA;AAEH;AACA;AACAC,UAAAA,SAAS,EAAED,KAAK,CAACC,SAAN,CAAgBU,GAAhB,CAAqBF,CAAD,IAC3BA,CAAC,CAACC,OAAF,KAAcH,SAAS,CAACG,OAAxB,GAAkCL,IAAlC,GAAyCI,CADlC;AAJR,SAAP,CAFW,CAUX;AACH,OAXD,MAWO;AACH;AACA,eAAO,EACH,GAAGT,KADA;AAEH;AACAC,UAAAA,SAAS,EAAE,CAAC,GAAGD,KAAK,CAACC,SAAV,EAAqBI,IAArB;AAHR,SAAP;AAKH;;AACL,SAAKV,gBAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHC,QAAAA,SAAS,EAAED,KAAK,CAACC,SAAN,CAAgBW,MAAhB,CACNH,CAAD,IAAOA,CAAC,CAACC,OAAF,KAAcP,MAAM,CAACG,OADrB;AAFR,OAAP;;AAMJ,SAAKV,eAAL;AACI,aAAO,EACH,GAAGI,KADA;AAEHC,QAAAA,SAAS,EAAE;AAFR,OAAP;;AAIJ,SAAKH,0BAAL;AACI,aAAO,EACH,GAAGE,KADA;AAEHE,QAAAA,eAAe,EAAEC,MAAM,CAACG;AAFrB,OAAP;;AAIJ,SAAKT,wBAAL;AACI,aAAO,EACH,GAAGG,KADA;AAEHa,QAAAA,aAAa,EAAEV,MAAM,CAACG;AAFnB,OAAP;;AAKJ;AACI,aAAON,KAAP;AAtDR;AAwDH,CA5DM","sourcesContent":["import {\r\n    CART_ADD_ITEM,\r\n    CART_REMOVE_ITEM,\r\n    CART_RESET_ITEM,\r\n    CART_SAVE_PAYMENT_METHOD,\r\n    CART_SAVE_SHIPPING_ADDRESS,\r\n} from \"../constants/cartConstants\";\r\n\r\n// search in the state.cartItems array\r\n// for the existence of the specific product\r\nexport const cartReducer = (\r\n    state = { cartItems: [], shippingAddress: {} },\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n        case CART_ADD_ITEM:\r\n            // that is defined by item (by the action.payload)\r\n            const item = action.payload;\r\n\r\n            // if we find a match assign the result to the existItem variable\r\n            const existItem = state.cartItems.find(\r\n                (x) => x.product === item.product\r\n            );\r\n\r\n            // if there is already a product matching the item in the state.cartItems array\r\n            if (existItem) {\r\n                // return the existing state with adjusted cartItems\r\n                return {\r\n                    ...state,\r\n                    // map through the cardItems array and replace the matching product with the new item\r\n                    // leave the rest products as they were\r\n                    cartItems: state.cartItems.map((x) =>\r\n                        x.product === existItem.product ? item : x\r\n                    ),\r\n                };\r\n                // otherwise if the item is NOT already a product matching the item in the state.cartItems array\r\n            } else {\r\n                // return the existing state with adjusted cardItems\r\n                return {\r\n                    ...state,\r\n                    // return a new cardItems array with the previous products spread and add the new item\r\n                    cartItems: [...state.cartItems, item],\r\n                };\r\n            }\r\n        case CART_REMOVE_ITEM:\r\n            return {\r\n                ...state,\r\n                cartItems: state.cartItems.filter(\r\n                    (x) => x.product !== action.payload\r\n                ),\r\n            };\r\n        case CART_RESET_ITEM:\r\n            return {\r\n                ...state,\r\n                cartItems: [],\r\n            };\r\n        case CART_SAVE_SHIPPING_ADDRESS:\r\n            return {\r\n                ...state,\r\n                shippingAddress: action.payload,\r\n            };\r\n        case CART_SAVE_PAYMENT_METHOD:\r\n            return {\r\n                ...state,\r\n                paymentMethod: action.payload,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}