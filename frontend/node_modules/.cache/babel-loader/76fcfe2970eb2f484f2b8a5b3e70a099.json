{"ast":null,"code":"'use strict';\n\nconst axios = require('axios').default;\n\nconst querystring = require('querystring');\n\nconst MidtransError = require('./midtransError');\n/**\n * Wrapper of Axios to do API request to Midtrans API\n * @return {Promise} of API response, or exception during request\n * capable to do HTTP `request`\n */\n\n\nclass HttpClient {\n  constructor() {\n    let parentObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.parent = parentObj;\n    this.http_client = axios.create();\n  }\n\n  request(httpMethod, serverKey, requestUrl) {\n    let firstParam = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let secondParam = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    let headers = {\n      'content-type': 'application/json',\n      'accept': 'application/json',\n      'user-agent': 'midtransclient-nodejs/1.3.0'\n    };\n    let reqBodyPayload = {};\n    let reqQueryParam = {};\n\n    if (httpMethod.toLowerCase() == 'get') {\n      // GET http request will use first available param as URL Query param\n      reqQueryParam = firstParam;\n      reqBodyPayload = secondParam;\n    } else {\n      // Non GET http request will use first available param as JSON payload body\n      reqBodyPayload = firstParam;\n      reqQueryParam = secondParam;\n    } // to avoid anonymous function losing `this` context, \n    // can also replaced with arrow-function instead which don't lose context\n\n\n    let thisInstance = this;\n    return new Promise(function (resolve, reject) {\n      // Reject if param is not JSON\n      if (typeof reqBodyPayload === 'string' || reqBodyPayload instanceof String) {\n        try {\n          reqBodyPayload = JSON.parse(reqBodyPayload);\n        } catch (err) {\n          reject(new MidtransError(`fail to parse 'body parameters' string as JSON. Use JSON string or Object as 'body parameters'. with message: ${err}`));\n        }\n      } // Reject if param is not JSON\n\n\n      if (typeof reqQueryParam === 'string' || reqQueryParam instanceof String) {\n        try {\n          reqQueryParam = JSON.parse(reqQueryParam);\n        } catch (err) {\n          reject(new MidtransError(`fail to parse 'query parameters' string as JSON. Use JSON string or Object as 'query parameters'. with message: ${err}`));\n        }\n      }\n\n      let response = thisInstance.http_client({\n        method: httpMethod,\n        headers: headers,\n        url: requestUrl,\n        data: reqBodyPayload,\n        params: reqQueryParam,\n        auth: {\n          username: serverKey,\n          password: ''\n        }\n      }).then(function (res) {\n        // Reject core API error status code\n        if (res.data.hasOwnProperty('status_code') && res.data.status_code >= 400 && res.data.status_code != 407) {\n          // 407 is expected get-status API response for `expire` transaction, non-standard\n          reject(new MidtransError(`Midtrans API is returning API error. HTTP status code: ${res.data.status_code}. API response: ${JSON.stringify(res.data)}`, res.data.status_code, res.data, res));\n        }\n\n        resolve(res.data);\n      }).catch(function (err) {\n        let res = err.response; // Reject API error HTTP status code\n\n        if (typeof res !== 'undefined' && res.status >= 400) {\n          reject(new MidtransError(`Midtrans API is returning API error. HTTP status code: ${res.status}. API response: ${JSON.stringify(res.data)}`, res.status, res.data, res)); // Reject API undefined HTTP response \n        } else if (typeof res === 'undefined') {\n          reject(new MidtransError(`Midtrans API request failed. HTTP response not found, likely connection failure, with message: ${JSON.stringify(err.message)}`, null, null, err));\n        }\n\n        reject(err);\n      });\n    });\n  }\n\n}\n\nmodule.exports = HttpClient;","map":{"version":3,"sources":["D:/udemy/Suppee/frontend/node_modules/midtrans-client/lib/httpClient.js"],"names":["axios","require","default","querystring","MidtransError","HttpClient","constructor","parentObj","parent","http_client","create","request","httpMethod","serverKey","requestUrl","firstParam","secondParam","headers","reqBodyPayload","reqQueryParam","toLowerCase","thisInstance","Promise","resolve","reject","String","JSON","parse","err","response","method","url","data","params","auth","username","password","then","res","hasOwnProperty","status_code","stringify","catch","status","message","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst axios = require('axios').default;\nconst querystring = require('querystring');\nconst MidtransError = require('./midtransError');\n/**\n * Wrapper of Axios to do API request to Midtrans API\n * @return {Promise} of API response, or exception during request\n * capable to do HTTP `request`\n */\nclass HttpClient{\n  constructor(parentObj={}){\n    this.parent = parentObj;\n    this.http_client = axios.create();\n  }\n  request(httpMethod,serverKey,requestUrl,firstParam={},secondParam={}){\n    let headers = {\n      'content-type': 'application/json',\n      'accept': 'application/json',\n      'user-agent': 'midtransclient-nodejs/1.3.0'\n    };\n\n    let reqBodyPayload = {};\n    let reqQueryParam = {};\n    if(httpMethod.toLowerCase() == 'get'){\n      // GET http request will use first available param as URL Query param\n      reqQueryParam = firstParam;\n      reqBodyPayload = secondParam;\n    } else {\n      // Non GET http request will use first available param as JSON payload body\n      reqBodyPayload = firstParam;\n      reqQueryParam = secondParam;\n    }\n\n    // to avoid anonymous function losing `this` context, \n    // can also replaced with arrow-function instead which don't lose context\n    let thisInstance = this;\n    return new Promise(function(resolve,reject){\n      // Reject if param is not JSON\n      if(typeof reqBodyPayload === 'string' || reqBodyPayload instanceof String){\n        try{\n          reqBodyPayload = JSON.parse(reqBodyPayload);\n        }catch(err){\n          reject(new MidtransError(`fail to parse 'body parameters' string as JSON. Use JSON string or Object as 'body parameters'. with message: ${err}`));\n        }\n      }\n      // Reject if param is not JSON\n      if(typeof reqQueryParam === 'string' || reqQueryParam instanceof String){\n        try{\n          reqQueryParam = JSON.parse(reqQueryParam);\n        }catch(err){\n          reject(new MidtransError(`fail to parse 'query parameters' string as JSON. Use JSON string or Object as 'query parameters'. with message: ${err}`));\n        }\n      }\n\n      let response = thisInstance.http_client({\n        method: httpMethod,\n        headers: headers,\n        url: requestUrl,\n        data: reqBodyPayload,\n        params: reqQueryParam,\n        auth: {\n          username: serverKey,\n          password: ''\n        }\n      }).then(function(res){\n        // Reject core API error status code\n        if(res.data.hasOwnProperty('status_code') && res.data.status_code >= 400 && res.data.status_code != 407){\n          // 407 is expected get-status API response for `expire` transaction, non-standard\n          reject(\n            new MidtransError(\n              `Midtrans API is returning API error. HTTP status code: ${res.data.status_code}. API response: ${JSON.stringify(res.data)}`,\n              res.data.status_code,\n              res.data,\n              res\n            )\n          )\n        }\n        resolve(res.data);\n      }).catch(function(err){\n        let res = err.response;\n        // Reject API error HTTP status code\n        if(typeof res !== 'undefined' && res.status >= 400){\n          reject(\n            new MidtransError(\n              `Midtrans API is returning API error. HTTP status code: ${res.status}. API response: ${JSON.stringify(res.data)}`,\n              res.status,\n              res.data,\n              res\n            )\n          )\n        // Reject API undefined HTTP response \n        } else if(typeof res === 'undefined'){\n          reject(\n            new MidtransError(\n              `Midtrans API request failed. HTTP response not found, likely connection failure, with message: ${JSON.stringify(err.message)}`,\n              null,\n              null,\n              err\n            )\n          )\n        }\n        reject(err);\n      })\n    });\n  }\n}\n\nmodule.exports = HttpClient;\n"]},"metadata":{},"sourceType":"script"}