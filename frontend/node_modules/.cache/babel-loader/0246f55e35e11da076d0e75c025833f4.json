{"ast":null,"code":"'use strict';\n\nconst ApiConfig = require('./apiConfig');\n\nconst HttpClient = require('./httpClient');\n/**\n * These are wrapper/implementation of API methods described on: \n * https://api-docs.midtrans.com/#midtrans-api\n * @return {Promise} - Promise that contains JSON API response decoded as Object\n */\n\n\nclass Transaction {\n  constructor() {\n    let parentObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.parent = parentObj;\n  }\n\n  status() {\n    let transactionId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let apiUrl = this.parent.apiConfig.getCoreApiBaseUrl() + '/v2/' + transactionId + '/status';\n    let responsePromise = this.parent.httpClient.request('get', this.parent.apiConfig.get().serverKey, apiUrl, null);\n    return responsePromise;\n  }\n\n  statusb2b() {\n    let transactionId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let apiUrl = this.parent.apiConfig.getCoreApiBaseUrl() + '/v2/' + transactionId + '/status/b2b';\n    let responsePromise = this.parent.httpClient.request('get', this.parent.apiConfig.get().serverKey, apiUrl, null);\n    return responsePromise;\n  }\n\n  approve() {\n    let transactionId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let apiUrl = this.parent.apiConfig.getCoreApiBaseUrl() + '/v2/' + transactionId + '/approve';\n    let responsePromise = this.parent.httpClient.request('post', this.parent.apiConfig.get().serverKey, apiUrl, null);\n    return responsePromise;\n  }\n\n  deny() {\n    let transactionId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let apiUrl = this.parent.apiConfig.getCoreApiBaseUrl() + '/v2/' + transactionId + '/deny';\n    let responsePromise = this.parent.httpClient.request('post', this.parent.apiConfig.get().serverKey, apiUrl, null);\n    return responsePromise;\n  }\n\n  cancel() {\n    let transactionId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let apiUrl = this.parent.apiConfig.getCoreApiBaseUrl() + '/v2/' + transactionId + '/cancel';\n    let responsePromise = this.parent.httpClient.request('post', this.parent.apiConfig.get().serverKey, apiUrl, null);\n    return responsePromise;\n  }\n\n  expire() {\n    let transactionId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let apiUrl = this.parent.apiConfig.getCoreApiBaseUrl() + '/v2/' + transactionId + '/expire';\n    let responsePromise = this.parent.httpClient.request('post', this.parent.apiConfig.get().serverKey, apiUrl, null);\n    return responsePromise;\n  }\n\n  refund() {\n    let transactionId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let parameter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let apiUrl = this.parent.apiConfig.getCoreApiBaseUrl() + '/v2/' + transactionId + '/refund';\n    let responsePromise = this.parent.httpClient.request('post', this.parent.apiConfig.get().serverKey, apiUrl, parameter);\n    return responsePromise;\n  }\n\n  refundDirect() {\n    let transactionId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let parameter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let apiUrl = this.parent.apiConfig.getCoreApiBaseUrl() + '/v2/' + transactionId + '/refund/online/direct';\n    let responsePromise = this.parent.httpClient.request('post', this.parent.apiConfig.get().serverKey, apiUrl, parameter);\n    return responsePromise;\n  }\n\n  notification() {\n    let notificationObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let self = this;\n    return new Promise(function (resolve, reject) {\n      if (typeof notificationObj === 'string' || notificationObj instanceof String) {\n        try {\n          notificationObj = JSON.parse(notificationObj);\n        } catch (err) {\n          reject(new MidtransNotificationError('fail to parse `notification` string as JSON. Use JSON string or Object as `notification`. with message:' + err.message));\n        }\n      }\n\n      let transactionId = notificationObj.transaction_id;\n      self.status(transactionId).then(function (res) {\n        resolve(res);\n      }).catch(function (err) {\n        reject(err);\n      });\n    });\n  }\n\n}\n\nclass MidtransNotificationError extends Error {}\n\nmodule.exports = Transaction;","map":{"version":3,"sources":["D:/udemy/Suppee/frontend/node_modules/midtrans-client/lib/transaction.js"],"names":["ApiConfig","require","HttpClient","Transaction","constructor","parentObj","parent","status","transactionId","apiUrl","apiConfig","getCoreApiBaseUrl","responsePromise","httpClient","request","get","serverKey","statusb2b","approve","deny","cancel","expire","refund","parameter","refundDirect","notification","notificationObj","self","Promise","resolve","reject","String","JSON","parse","err","MidtransNotificationError","message","transaction_id","then","res","catch","Error","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst ApiConfig = require('./apiConfig')\nconst HttpClient = require('./httpClient')\n\n/**\n * These are wrapper/implementation of API methods described on: \n * https://api-docs.midtrans.com/#midtrans-api\n * @return {Promise} - Promise that contains JSON API response decoded as Object\n */\nclass Transaction{\n  constructor(parentObj={}){\n    this.parent = parentObj;\n  }\n  status(transactionId=''){\n    let apiUrl = this.parent.apiConfig.getCoreApiBaseUrl()+'/v2/'+transactionId+'/status';\n    let responsePromise = this.parent.httpClient.request(\n      'get',\n      this.parent.apiConfig.get().serverKey,\n      apiUrl,\n      null);\n    return responsePromise;\n  }\n  statusb2b(transactionId=''){\n    let apiUrl = this.parent.apiConfig.getCoreApiBaseUrl()+'/v2/'+transactionId+'/status/b2b';\n    let responsePromise = this.parent.httpClient.request(\n      'get',\n      this.parent.apiConfig.get().serverKey,\n      apiUrl,\n      null);\n    return responsePromise;\n  }\n  approve(transactionId=''){\n    let apiUrl = this.parent.apiConfig.getCoreApiBaseUrl()+'/v2/'+transactionId+'/approve';\n    let responsePromise = this.parent.httpClient.request(\n      'post',\n      this.parent.apiConfig.get().serverKey,\n      apiUrl,\n      null);\n    return responsePromise;\n  }\n  deny(transactionId=''){\n    let apiUrl = this.parent.apiConfig.getCoreApiBaseUrl()+'/v2/'+transactionId+'/deny';\n    let responsePromise = this.parent.httpClient.request(\n      'post',\n      this.parent.apiConfig.get().serverKey,\n      apiUrl,\n      null);\n    return responsePromise;\n  }\n  cancel(transactionId=''){\n    let apiUrl = this.parent.apiConfig.getCoreApiBaseUrl()+'/v2/'+transactionId+'/cancel';\n    let responsePromise = this.parent.httpClient.request(\n      'post',\n      this.parent.apiConfig.get().serverKey,\n      apiUrl,\n      null);\n    return responsePromise;\n  }\n  expire(transactionId=''){\n    let apiUrl = this.parent.apiConfig.getCoreApiBaseUrl()+'/v2/'+transactionId+'/expire';\n    let responsePromise = this.parent.httpClient.request(\n      'post',\n      this.parent.apiConfig.get().serverKey,\n      apiUrl,\n      null);\n    return responsePromise;\n  }\n  refund(transactionId='',parameter={}){\n    let apiUrl = this.parent.apiConfig.getCoreApiBaseUrl()+'/v2/'+transactionId+'/refund';\n    let responsePromise = this.parent.httpClient.request(\n      'post',\n      this.parent.apiConfig.get().serverKey,\n      apiUrl,\n      parameter);\n    return responsePromise;\n  }\n  refundDirect(transactionId='',parameter={}){\n    let apiUrl = this.parent.apiConfig.getCoreApiBaseUrl()+'/v2/'+transactionId+'/refund/online/direct';\n    let responsePromise = this.parent.httpClient.request(\n      'post',\n      this.parent.apiConfig.get().serverKey,\n      apiUrl,\n      parameter);\n    return responsePromise;\n  }\n  notification(notificationObj={}){\n    let self = this;\n    return new Promise(function(resolve,reject){\n      if(typeof notificationObj === 'string' || notificationObj instanceof String){\n        try{\n          notificationObj = JSON.parse(notificationObj);\n        }catch(err){\n          reject(new MidtransNotificationError('fail to parse `notification` string as JSON. Use JSON string or Object as `notification`. with message:'+err.message));\n        }\n      }\n      let transactionId = notificationObj.transaction_id;\n      self.status(transactionId)\n        .then(function(res){\n          resolve(res);\n        })\n        .catch(function(err){\n          reject(err)\n        });\n    });\n  };\n}\n\nclass MidtransNotificationError extends Error{}\n\nmodule.exports = Transaction;"]},"metadata":{},"sourceType":"script"}